#!/bin/bash

shopt -s expand_aliases


PATH_SCRIPT="/usr/local/bin/telegram/test"
TOKEN="846757969:AAFt9pYaNa0KauVGnV9s1QJ5a2rwA10v2CA"
#ID="-259046724"
ID="-1001341771428"
URL_UPDATE="https://api.telegram.org/bot$TOKEN/getUpdates"
URL_SEND="https://api.telegram.org/bot$TOKEN/sendmessage?chat_id=$ID&text="
SEND="curl -k -s -d -X POST $URL_SEND"
URL_HOOK="https://api.telegram.org/bot$TOKEN/getWebhookInfo"
DATE="$PATH_SCRIPT/test_date.txt"
FILE_MOTOR="/tmp/motor_filtrado.txt"
FILE_CCR="/tmp/archivo_log_ccr.txt"
FILE_NODE="/tmp/node_filtrado.txt"
#LOG_TELEGRAM="/var/log/telegram_bot.log"
BD="/tmp/established_bd.txt"
#PM_STOP="pm2 stop /opt/nodejs/api-gateway/bin/www –watch"
#PM_START="pm2 start /opt/nodejs/api-gateway/bin/www –watch"
PM_STATUS="sudo pm2 show 0 | grep status | awk '{print $4}'"
#ENGINE_STOP="sudo /home/accrapidpago/Documents/Motor/glassfish4/glassfish/bin/asadmin stop-domain"
#ENGINE_START="nohup sudo /home/accrapidpago/Documents/Motor/glassfish4/glassfish/bin/asadmin start-domain"
#ENGINE_STATUS="sudo /home/accrapidpago/Documents/Motor/glassfish4/glassfish/bin/asadmin list-domains"
#ENGINE_STOP="sudo /opt/Motor/glassfish4/glassfish/bin/asadmin stop-domain"
#ENGINE_START="sudo /opt/Motor/glassfish4/glassfish/bin/asadmin start-domain"
#ENGINE_STATUS="sudo /opt/Motor/glassfish4/glassfish/bin/asadmin list-domains"
NEW_LINE="%0A"
#NEW_LINE=
#NEW_LINE="<br>"
USER="$PATH_SCRIPT/users_test.txt"
ENGINE="172.28.99.34"
NODE1="172.28.111.42"
NODE2="172.28.111.43"
IP_BD="10.20.96.33"
SSH="ssh -t -q agamez"
XML="/opt/wso2/wso2ei-6.3.0/repository/deployment/server/synapse-configs/default/local-entries/RATE_LIMIT.xml"


alias node1_stop="$SSH@$NODE1 sudo pm2 stop /opt/nodejs/api-gateway/bin/www –watch"
alias node1_start="$SSH@$NODE1 sudo pm2 start /opt/nodejs/api-gateway/bin/www –watch"
#alias node1_status="$SSH@$NODE1 sudo pm2 show 0 | grep status"
alias node2_stop="$SSH@$NODE2 sudo pm2 stop /opt/nodejs/api-gateway/bin/www –watch"
alias node2_start="$SSH@$NODE2sudo pm2 start /opt/nodejs/api-gateway/bin/www –watch"
#alias node2_status="$SSH@$NODE2 sudo pm2 show 0 | grep status | awk '{print $4}'"
alias engine_stop="$SSH@$ENGINE sudo /home/accrapidpago/Documents/Motor/glassfish4/glassfish/bin/asadmin stop-domain"
alias engine_start="$SSH@$ENGINE sudo /home/accrapidpago/Documents/Motor/glassfish4/glassfish/bin/asadmin start-domain"
alias engine_status="$SSH@$ENGINE sudo /home/accrapidpago/Documents/Motor/glassfish4/glassfish/bin/asadmin list-domains"
alias qa_stop="sudo /opt/Motor/glassfish4/glassfish/bin/asadmin stop-domain"
alias qa_start="sudo /opt/Motor/glassfish4/glassfish/bin/asadmin start-domain"
alias qa_status="sudo /opt/Motor/glassfish4/glassfish/bin/asadmin list-domains"
alias contencion1="$SSH@$NODE1 sudo /usr/local/bin/noc/trx.sh"
alias contencion2="$SSH@$NODE2 sudo /usr/local/bin/noc/trx.sh"


echo "$$" > $PATH_SCRIPT/pid_test.txt

. /usr/local/bin/telegram/test/token
. /usr/local/bin/telegram/test/logger

new_message()
{

X=0

while [ $X -eq 0 ]; do

        PENDING=`curl -k -s -X POST $URL_HOOK | jq '.result.pending_update_count'`

        if [ $PENDING -eq 0 ]; then

                X=0

        elif [ $PENDING -gt 0 ]; then


                PENDING_ID=`curl -Ls $URL_UPDATE | jq ".result[$(expr $PENDING - 1)].update_id"`

                if [ $PENDING_ID = "null" ]; then

                        X=0

                else

                        curl -s $URL_UPDATE?offset=$PENDING_ID > /dev/null
                        authentication

                fi

        fi

done

}

record()
{

        MSJ=`curl -s $URL_UPDATE | jq '.result[0].update_id'`
        ID_TO_DELETE=`expr $MSJ + 1`

        echo $MSJ > $DATE
        curl -s $URL_UPDATE?offset=$ID_TO_DELETE

        new_message

}


authentication()
{

        WRITER=`curl -s $URL_UPDATE | jq '.result[0].message.from.id'`

#       OPT=`curl -s $URL_UPDATE | jq '.result[0].message.text' | tr -d '/"' | awk -F "_" '{print $1}'`

        if [ -z "$WRITER" ]; then

                new_message

        elif [ $WRITER = "null" ]; then

                new_message

        else

                cat $USER | grep $WRITER 2>/dev/null 2>&1

                if [[ $? -eq 0  ]]; then

#                       hour

                        commands

                else

                        $SEND"No posee permisologia para ejecutar comandos"

                        record

                fi

        fi

        }


#hour()
#{

#       HOUR=`date "+%H"`

#       if [[ $HOUR < 7 ]] && [[ $HOUR > 17 ]]; then

#               $SEND"No puede ejecutar comandos fuera de guardia"

#               week1 $(date "+%a")

#               record

#       else

#               commands

#       fi




#}


commands()

{

        OPT=`curl -s $URL_UPDATE | jq '.result[0].message.text' | tr -d '/"' | awk -F "_" '{print $1}'`

        case $OPT in

                uptime)

                        UPTIME=`ps -p $(cat $PATH_SCRIPT/pid_test.txt) -o etime=`
                        $SEND"$UPTIME"

                        logUptime $WRITER $OPT $UPTIME

                        record

                ;;

                token)

                        token

                        logToken $WRITER $OPT $TOKEN_BOT

                        record

                ;;

                guide)

                        $SEND"Lista de comandos:"
                        $SEND" - uptime:  Tiempo que el bot ha estado operativo $NEW_LINE - cont1_(%cont): Aplica contencion en nodo 1 $NEW_LINE - no.cont1: Quita contencion en nodo 1 $NEW_LINE - cont2_(%cont): Aplica contencion en nodo 2 $NEW_LINE - no.cont2: Quita contencion en nodo 2 $NEW_LINE - cont.nodes_(%cont): Aplica contencion en ambos nodos $NEW_LINE - no.cont.nodes: Quita contencion en ambos nodos $NEW_LINE - cont.status: Muestra estatus actual de contencion en nodos $NEW_LINE - node1.start: Inicia PM2 en nodo 1 $NEW_LINE - node1.stop: Detiene PM2 en nodo 1 $NEW_LINE - node2.start: Inicia PM2 en nodo 2 $NEW_LINE - node2.stop: Detiene PM2 en nodo 2 $NEW_LINE - nodes.start: Iniciar PM2 en ambos nodos $NEW_LINE - nodes.stop: Detener PM2 en ambos nodos $NEW_LINE - qa.start: Inicia motor de QA $NEW_LINE - qa.stop: Detiene motor QA $NEW_LINE - engine.start: Inicia motor de producción $NEW_LINE - engine.stop: Detiene motor de producción $NEW_LINE - status: Muestra estadistica actual de la plataforma (tiempos prom, bd) $NEW_LINE - platform: Muestra estatus operacional de plataforma (estatus nodos y motor) $NEW_LINE - negated: Muestra top 3 de Bancos negando en cada nodo (se actualiza cada 5 minutos) $NEW_LINE - tx: Valida si nodos y motor estan transando"

#               logGuide $WRITER $OPT

                record


                ;;

                tx)

                        local LOG_NODE="/opt/wso2/wso2ei-6.3.0/repository/logs/wso2carbon.log"
                        local LOG_ENGINE="/DATOS/Logs/server.log"

                        local NODE1_COMPRA=`$SSH@$NODE1 cat $LOG_NODE | grep -a "compra" | wc -l`
                        local NODE2_COMPRA=`$SSH@$NODE2 cat $LOG_NODE | grep -a "compra" | wc -l`
                        local ENGINE_TX=`$SSH@$ENGINE cat $LOG_ENGINE | grep -a "procesador" | wc -l`

                        sleep 10

                        local NODE1_COMPRA2=`$SSH@$NODE1 cat $LOG_NODE | grep -a "compra" | wc -l`
                        local NODE2_COMPRA2=`$SSH@$NODE2 cat $LOG_NODE | grep -a "compra" | wc -l`
                        local ENGINE_TX2=`$SSH@$ENGINE cat $LOG_ENGINE | grep -a "procesador" | wc -l`

                        if [[ $NODE1_COMPRA -lt $NODE1_COMPRA2 ]]; then

                                local GW_1="Transando"
                                $SEND"Nodo 1: Transando"

                        elif [[ $NODE1_COMPRA -gt $NODE1_COMPRA2 ]]; then

                                sleep 10

                                local NODE1_COMPRA=$NODE1_COMPRA2
                                local NODE1_COMPRA2=`$SSH@$NODE1 cat $LOG_NODE | grep -a "compra" | wc -l`

                                if [[ $NODE1_COMPRA -eq $NODE1_COMPRA2 ]]; then

                                        $SEND"Nodo 1: No hay transacciones, se valida estatus PM2"

                                        $SEND"Nodo 1: $($SSH@$NODE1 "sudo pm2 show 0 | grep status" | awk '{print $4}')"

                                        local GW_1="Detenido"

                                else

                                        local GW_1="Transando"
                                        $SEND"Nodo 1: Transando"

                                fi

                        else

                                $SEND"Nodo 1: No hay transacciones, se valida estatus del PM2"

                                $SEND"Nodo 1: $($SSH@$NODE1 "sudo pm2 show 0 | grep status" | awk '{print $4}')"

                                local GW_1="Detenido"

                        fi

##########################################

                        if [[ $NODE2_COMPRA -lt $NODE2_COMPRA2 ]]; then

                                $SEND"Nodo 2: Transando"

                                local GW_2="Transando"

                        elif [[ $NODE2_COMPRA -gt $NODE2_COMPRA2 ]]; then

                                sleep 10

                                local NODE2_COMPRA=$NODE2_COMPRA2
                                local NODE2_COMPRA2=`$SSH@$NODE2 cat $LOG_NODE | grep -a "compra" | wc -l`

                                if [[ $NODE2_COMPRA -eq $NODE2_COMPRA2 ]]; then

                                        $SEND"Nodo 2: No hay transacciones, se valida estatus PM2"

                                        $SEND"Nodo 2: $($SSH@$NODE2 "sudo pm2 show 0 | grep status" | awk '{print $4}')"

                                        local GW_2="Detenido"

                                else

                                        $SEND"Nodo 2: Transando"

                                        local GW_2="Transando"

                                fi

                        else

                                $SEND"Nodo 2: No hay transacciones, se valida estatus del PM2"

                                $SEND"Nodo 2: $($SSH@$NODE2 "sudo pm2 show 0 | grep status" | awk '{print $4}')"

                                local GW_2="Detenido"

                        fi

#######################################

                        if [[ $ENGINE_TX -lt $ENGINE_TX2 ]]; then

                                $SEND"Motor: Activo"

                                local GF="Activo"


                        elif [[ $ENGINE_TX -gt $ENGINE_TX2 ]]; then

                                sleep 10

                                local ENGINE_TX=$ENGINE_TX2
                                local ENGINE_TX2=`$SSH@$ENGINE cat $LOG_ENGINE | grep -a "compra" | wc -l`

                                if [[ $ENGINE_TX -eq $ENGINE_TX2 ]]; then

                                        $SEND"Motor: No hay transacciones, se valida estatus del Motor"

                                        if [[ $(engine_status | grep not | wc -l) -eq 0 ]]; then

                                                $SEND"Motor: Activo"

                                                local GF="Activo"

                                        else

                                                $SEND"Motor: Detenido"

                                                local GF="Detenido"

                                        fi

                                else

                                        $SEND"Motor: Detenido"

                                        local GF="Detenido"

                                fi

                        else

                                $SEND"Motor: No hay transacciones, se valida estatus del Motor"

                                if [[ $(engine_status | grep not | wc -l) -eq 0 ]]; then

                                                $SEND"Motor: Activo"

                                                local GF="Activo"

                                        else

                                                $SEND"Motor: Detenido"

                                                local GF="Detenido"

                                        fi

                        fi

                        logTx $WRITER $OPT $GW_1 $GW_2 $GF

                        record

                ;;


                cont1)

                        CONTENCION=`curl -s $URL_UPDATE | jq '.result[0].message.text' | awk -F "_" '{print $2}' | tr -d '"'`

                        if [[ $CONTENCION -le 100 ]] && [[ $CONTENCION -ge 0 ]]; then

#                               $SSH@$NODE1 sudo /usr/local/bin/noc/trx.sh $CONTENCION

                                contencion1 $CONTENCION

                                $SEND"Contencion del $CONTENCION% aplicada en nodo 1"

                        else

                                $SEND"Contencion debe ser entre 0 y 100"

                        fi

                        logCont1 $WRITER $OPT $CONTENCION

                        record

                ;;

                cont2)

                        CONTENCION=`curl -s $URL_UPDATE | jq '.result[0].message.text' | awk -F "_" '{print $2}' | tr -d '"'`

                        if [[ $CONTENCION -le 100 ]] && [[ $CONTENCION -ge 0 ]]; then

#                               $SSH@$NODE2 sudo /usr/local/bin/noc/trx.sh $CONTENCION

                                contencion2 $CONTENCION

                                $SEND"Contencion del $CONTENCION% aplicada en nodo 2"

                        else

                                $SEND"Contencion debe ser entre 0 y 100"

                        fi

                        logCont2 $WRITER $OPT $CONTENCION

                        record

                ;;

                cont.nodes)

                        CONTENCION=`curl -s $URL_UPDATE | jq '.result[0].message.text' | awk -F "_" '{print $2}' | tr -d '"'`

                        if [[ $CONTENCION -le 100 ]] && [[ $CONTENCION -ge 0 ]]; then

#                                $SSH@$NODE1 sudo /usr/local/bin/noc/trx.sh $CONTENCION
#                                $SSH@$NODE2 sudo /usr/local/bin/noc/trx.sh $CONTENCION

                                contencion1 $CONTENCION
                                contencion2 $CONTENCION

                                $SEND"Contencion del $CONTENCION% aplicada en ambos nodos"

                        else

                                $SEND"Contencion debe ser entre 0 y 100"

                        fi

                        logContNodes $WRITER $OPT $CONTENCION

                        record

                ;;

                no.cont.nodes)

                        contencion1 0
                        contencion2 0

                        $SEND"Contencion retirada en ambos nodos"

                        logNoCont $WRITER $OPT

                        record

                ;;

                no.cont1)

                        contencion1 0

                        $SEND"Nodo 1: Contencion retirada"

                        logNoCont1 $WRITER $OPT

                        record

                ;;

                no.cont2)

#                        $SSH@$NODE2 sudo /usr/local/bin/noc/trx.sh 0

                        contencion2 0

                        $SEND"Nodo 2: Contencion retirada"

                        logNoCont2 $WRITER $OPT

                        record

                ;;

                cont.status)


                        PORCENTAJE=`$SSH@$NODE1 sudo cat $XML | grep "RATE" | awk -F ">" '{print $2}' | awk -F "<" '{print $1}'`

                        PORCENTAJE2=`$SSH@$NODE2 sudo cat $XML | grep "RATE" | awk -F ">" '{print $2}' | awk -F "<" '{print $1}'`

                        $SEND"Contencion Nodo 1: $PORCENTAJE% $NEW_LINE Contencion Nodo 2: $PORCENTAJE2%"

                        logContStatus $WRITER $OPT $PORCENTAJE $PORCENTAJE2

                        record

                ;;

                node1.start)

                        node1_start > /dev/null

                        $SEND"Nodo 1: PM2 Iniciado"

                        local GW_1=`$SSH@$NODE1 "sudo pm2 show 0 | grep status" | awk '{print $4}'`

                        $SEND"Nodo 1: $GW_1"

                        logNode1Start $WRITER $OPT $GW_1

                        record

                ;;

                node1.stop)

                        node1_stop > /dev/null

                        $SEND"Nodo 1: PM2 Detenido"

                        local GW_1=`$SSH@$NODE1 "sudo pm2 show 0 | grep status" | awk '{print $4}'`

                        $SEND"Nodo 1: $GW_1"

                        logNode1Stop $WRITER $OPT $GW_1

                        record

                ;;

                node2.start)

                        node2_start > /dev/null

                        $SEND"Nodo 2: PM2 Iniciado"

                        local GW_2=`$SSH@$NODE2 "sudo pm2 show 0 | grep status" | awk '{print $4}'`

                        $SEND"Nodo 2: $GW_2"

                        logNode2Start $WRITER $OPT $GW_2

                        record

                ;;

                node2.stop)

                        node2_stop > /dev/null

                        $SEND"Nodo 2: PM2 Detenido"

                        local GW_2=`$SSH@$NODE2 "sudo pm2 show 0 | grep status" | awk '{print $4}'`

                        $SEND"Nodo 2: $GW_2"

                        logNode2Stop $WRITER $OPT $GW_2

                        record

                ;;

                nodes_start)

                        $SEND"Iniciando PM2 en ambos nodos"

                        node1_start > /dev/null

                        local GW_1=`$SSH@$NODE1 "sudo pm2 show 0 | grep status" | awk '{print $4}'`

                        $SEND"Nodo 1: $GW_1"

                        node2_start > /dev/null

                        local GW_2=`$SSH@$NODE2 "sudo pm2 show 0 | grep status" | awk '{print $4}'`

                        $SEND"Nodo 2: $GW_2"

                        sleep 5

                        $SEND"PM2 iniciado exitosamente"

                        logNodesStart $WRITER $OPT $GW_1 $GW_2

                ;;

                nodes_stop)

                        $SEND"Deteniendo PM2 en ambos nodos"

                        node1_stop >/dev/null

                        local GW_1=`$SSH@$NODE1 "sudo pm2 show 0 | grep status" | awk '{print $4}'`

                        $SEND"Nodo 1: $GW_1"

                        node2_stop > /dev/null

                        local GW_2=`$SSH@$NODE2 "sudo pm2 show 0 | grep status" | awk '{print $4}'`

                        $SEND"Nodo 2: $GW_2"

                        sleep 5

                        $SEND"PM2 detenido exitosamente"

                        logNodesStop $WRITER $OPT $GW_1 $GW_2

                ;;

                qa.stop)

                        $SEND"Bajando Motor"

                        qa_stop > /dev/null

                        sleep 160

#                        $SSH@$ENGINE sudo /home/accrapidpago/Documents/Motor/glassfish4/glassfish/bin/asadmin stop-domain

                        if [[ $(qa_status | grep not | wc -l) -eq 0 ]]; then

                                $SEND"Motor stopped"

                                $SEND"Esperando a que liberen las conexiones a la BD"

                                Y=1

                                while [ $Y -gt 0 ]; do

#                                        BD_MOTOR=`$SSH@$ENGINE sudo netstat -natp | grep 1521 | grep ESTABLISHED | wc -l`

                                        if [[ $(netstat -natp | grep 1521 | grep ESTABLISHED | wc -l) -eq 0 ]]; then

                                                break

                                        else

                                                Y=1

                                                sleep 2

                                        fi

                                done

                                $SEND"Conexiones a BD liberadas"

                                local RESULT="Successful"

                        else

                                $SEND"Error al detener el motor, intente nuevamente"

                                local  RESULT="Failed"

                        fi

                        logQaStop $WRITER $OPT $RESULT

                        record
                ;;

                qa.start)

                        $SEND"Levantando Motor"

#                       $SSH@$ENGINE nohup sudo /home/accrapidpago/Documents/Motor/glassfish4/glassfish/bin/asadmin start-domain

                        qa_start > /dev/null


                        if [[ $(qa_status | grep not | wc -l) -eq 0 ]]; then

                                $SEND"Motor online"

                                local RESULT="Successful"

                        else

                                $SEND"Error al iniciar el motor"

                                local RESULT="Failed"

                        fi

                        logQaStart $WRITER $OPT $RESULT

                        record

                       ;;

                engine.start)

                        $SEND"Levantando Motor"

#                       $SSH@$ENGINE nohup sudo /home/accrapidpago/Documents/Motor/glassfish4/glassfish/bin/asadmin start-domain

                        engine_start > /dev/null


                        if [[ $(engine_status | grep not | wc -l) -eq 0 ]]; then

                                $SEND"Motor online"

                                local RESULT="Successful"

                        else

                                $SEND"Error al iniciar el motor"

                                local RESULT="Failed"

                        fi

                        logEngineStart $WRITER $OPT $RESULT

                        record

                       ;;


                 engine.stop)

                        $SEND"Bajando Motor"

                        engine_stop > /dev/null

                        sleep 160

#                        $SSH@$ENGINE sudo /home/accrapidpago/Documents/Motor/glassfish4/glassfish/bin/asadmin stop-domain

                        if [[ $(engine_status | grep not | wc -l) -eq 0 ]]; then

                                $SEND"Motor stopped"

                                $SEND"Esperando a que liberen las conexiones a la BD"

                                CONEXIONES=1

                                while [ $CONEXIONES -gt 0 ]; do

#                                        BD_MOTOR=`$SSH@$ENGINE sudo netstat -natp | grep 1521 | grep ESTABLISHED | wc -l`

                                        if [[ $($SSH@$ENGINE sudo netstat -natp | grep 1521 | grep ESTABLISHED | wc -l) -eq 0 ]]; then

                                                break

                                        else

                                                CONEXIONES=1

                                                sleep 2

                                        fi

                                done

                                $SEND"Conexiones a BD liberadas"

                                local RESULT="Successful"


                        else

                                $SEND"Error al detener el motor, intente nuevamente"

                                local RESULT="Failed"

                        fi

                        logEngineStop $WRITER $OPT $RESULT

                        record
                ;;


                status)

                        CONEXIONES=`$SSH@$IP_BD sudo netstat -natp | grep 1521 | grep ESTABLISHED | wc -l`
                        CCR=`$SSH@$ENGINE cat $FILE_CCR | awk '{print $12}' | awk '{a+=$1}END{printf ("%.2f\n", a/NR)}' `
                        MOTOR=`$SSH@$ENGINE cat $FILE_MOTOR | awk '{print $12}' | awk '{a+=$1}END{printf ("%.2f\n", a/NR)}'`
                        NODO1=`$SSH@$NODE1 cat $FILE_NODE | awk '{a+=$5} END {printf ("%.2f\n", ((a/NR)*0.001))}'`
                        NODO2=`$SSH@$NODE2 cat $FILE_NODE | awk '{a+=$5} END {printf ("%.2f\n", ((a/NR)*0.001))}'`

                        $SEND" CCR: $CCR seg $NEW_LINE Motor: $MOTOR seg $NEW_LINE $NEW_LINE Nodo 1: $NODO1 seg $NEW_LINE Nodo 2: $NODO2 seg $NEW_LINE $NEW_LINE BD: $CONEXIONES "

                        logStatus $WRITER $OPT $CCR $MOTOR $NODO1 $NODO2 $CONEXIONES

                        record
                ;;

                platform)

                        $SEND"Nodo 1: $($SSH@$NODE1 "sudo pm2 show 0 | grep status" | awk '{print $4}')"
                        $SEND"Nodo 2: $($SSH@$NODE2 "sudo pm2 show 0 | grep status" | awk '{print $4}')"



                        if [[ $(engine_status | grep not | wc -l) -eq 0 ]]; then

                                local STATUS_MOTOR="online"
                                $SEND"Motor: online"

                        else

                                local STATUS_MOTOR="stopped"
                                $SEND"Motor: stopped"

                        fi

                        if [[ $(qa_status | grep not | wc -l) -eq 0 ]]; then

                                local STATUS_QA="online"
                                $SEND"Motor QA: online"

                        else

                                local STATUS_QA="stopped"
                                $SEND"Motor QA: stopped"

                        fi

                        logPlatform $WRITER $OPT $($SSH@$NODE1 "sudo pm2 show 0 | grep status" | awk '{print $4}') $($SSH@$NODE2 "sudo pm2 show 0 | grep status" | awk '{print $4}') $STATUS_MOTOR $STATUS_QA

                        record

                ;;

                negated)

                        local NODO1_NEGADAS_1=`$SSH@$NODE1 "cat /tmp/top_negadas_x_banco.txt" | awk 'NR==1{print $1}'`
                        local NODO1_BANK_1=`$SSH@$NODE1 "cat /tmp/top_negadas_x_banco.txt" | awk 'NR==1{print $2}' | tr -d "$'\r"`
                        local NODO1_NEGADAS_2=`$SSH@$NODE1 'cat /tmp/top_negadas_x_banco.txt' | awk 'NR==2{print $1}'`
                        local NODO1_BANK_2=`$SSH@$NODE1 "cat /tmp/top_negadas_x_banco.txt" | awk 'NR==2{print $2}' | tr -d "$'\r"`
                        local NODO1_NEGADAS_3=`$SSH@$NODE1 "cat /tmp/top_negadas_x_banco.txt" | awk 'NR==3{print $1}'`
                        local NODO1_BANK_3=`$SSH@$NODE1 "cat /tmp/top_negadas_x_banco.txt" | awk 'NR==3{print $2}' | tr -d "$'\r"`

                        local NODO2_NEGADAS_1=`$SSH@$NODE2 "cat /tmp/top_negadas_x_banco.txt" | awk 'NR==1{print $1}'`
                        local NODO2_BANK_1=`$SSH@$NODE2 "cat /tmp/top_negadas_x_banco.txt" | awk 'NR==1{print $2}' | tr -d "$'\r"`
                        local NODO2_NEGADAS_2=`$SSH@$NODE2 'cat /tmp/top_negadas_x_banco.txt' | awk 'NR==2{print $1}'`
                        local NODO2_BANK_2=`$SSH@$NODE2 "cat /tmp/top_negadas_x_banco.txt" | awk 'NR==2{print $2}' | tr -d "$'\r"`
                        local NODO2_NEGADAS_3=`$SSH@$NODE2 "cat /tmp/top_negadas_x_banco.txt" | awk 'NR==3{print $1}'`
                        local NODO2_BANK_3=`$SSH@$NODE2 "cat /tmp/top_negadas_x_banco.txt" | awk 'NR==3{print $2}' | tr -d "$'\r"`


                        $SEND"Nodo 1: $NEW_LINE $NODO1_BANK_1: $NODO1_NEGADAS_1 $NEW_LINE $NODO1_BANK_2: $NODO1_NEGADAS_2 $NEW_LINE $NODO1_BANK_3: $NODO1_NEGADAS_3"

                        $SEND"Nodo 2: $NEW_LINE $NODO2_BANK_1: $NODO2_NEGADAS_1 $NEW_LINE $NODO2_BANK_2: $NODO2_NEGADAS_2 $NEW_LINE $NODO2_BANK_3: $NODO2_NEGADAS_3"

                        logNegated $WRITER $OPT $NODO1_BANK_1 $NODO1_NEGADAS_1 $NODO1_BANK_2 $NODO1_NEGADAS_2 $NODO1_BANK_3 $NODO1_NEGADAS_3 $NODO2_BANK_1 $NODO2_NEGADAS_1 $NODO2_BANK_2 $NODO2_NEGADAS_2 $NODO2_BANK_3 $NODO2_NEGADAS_3

                        record

                ;;

                *)

#                       curl -k -s -X POST $URL_SEND"Comando errado"
                        $SEND"Comando errado"

                        logWrong $WRITER $OPT

                        record

                ;;

        esac

}

new_message;
record;
authentication;
hour;
commands;
