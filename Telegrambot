#!/bin/bash

#id noc1: 707224929

#id Efrhen: 225502951

#id Jesus: 607775607

#id Lorena: 702450891

#id Arlen: 468828628

#id Yesenia: 1012303665

#id Luis Ravelo: 706566309

#id Hector: 714821206

#id Alonso: 1039017724

shopt -s expand_aliases


PATH_SCRIPT="/usr/local/bin/telegram/test"
TOKEN="846757969:AAFt9pYaNa0KauVGnV9s1QJ5a2rwA10v2CA"
ID="-1001341771428"
URL_UPDATE="https://api.telegram.org/bot$TOKEN/getUpdates"
URL_SEND="https://api.telegram.org/bot$TOKEN/sendmessage?chat_id=$ID&text="
SEND="curl -k -s -d -X POST $URL_SEND"
URL_HOOK="https://api.telegram.org/bot$TOKEN/getWebhookInfo"
FILE_MOTOR="/tmp/motor_filtrado.txt"
FILE_CCR="/tmp/archivo_log_ccr.txt"
FILE_NODE="/tmp/node_filtrado.txt"
BD="/tmp/established_bd.txt"
PM_STATUS="sudo pm2 show 0 | grep status | awk '{print $4}'"
NEW_LINE="%0A"
USER="$PATH_SCRIPT/users_test.txt"
ENGINE="172.28.99.34"
NODE1="172.28.111.42"
NODE2="172.28.111.43"
IP_BD="10.20.96.33"
WIFI="172.28.99.12"
BOD_GW="172.28.111.48"
BOD_MOTOR="172.28.111.49"
LOG_BOD="/opt/bod/Gateway/tomcat8.5/logs/catalina.out"
LOG_BOD_GF="/DATOS1/bod/Motor/glassfish4/glassfish/domains/domain1/logs/server.log"
SW1="172.28.111.44"
SW2="172.28.111.45"
SSH="ssh -t -q agamez"
XML="/opt/wso2/wso2ei-6.3.0/repository/deployment/server/synapse-configs/default/local-entries/RATE_LIMIT.xml"
TIME_REQUEST="$PATH_SCRIPT/time_token_request.txt"
TOKEN_TXT="$PATH_SCRIPT/token.txt"

alias node1_stop="$SSH@$NODE1 sudo pm2 stop /opt/nodejs/api-gateway/bin/www –watch"
alias node1_start="$SSH@$NODE1 sudo pm2 start /opt/nodejs/api-gateway/bin/www –watch"
alias node2_stop="$SSH@$NODE2 sudo pm2 stop /opt/nodejs/api-gateway/bin/www –watch"
alias node2_start="$SSH@$NODE2 sudo pm2 start /opt/nodejs/api-gateway/bin/www –watch"
alias engine_stop="$SSH@$ENGINE sudo /home/accrapidpago/Documents/Motor/glassfish4/glassfish/bin/asadmin stop-domain"
alias engine_start="$SSH@$ENGINE 'sudo nohup /home/accrapidpago/Documents/Motor/glassfish4/glassfish/bin/asadmin start-domain >/dev/null 2>&1'"
alias engine_status="$SSH@$ENGINE sudo /home/accrapidpago/Documents/Motor/glassfish4/glassfish/bin/asadmin list-domains"
alias qa_stop="sudo /opt/Motor/glassfish4/glassfish/bin/asadmin stop-domain"
alias qa_start="sudo /opt/Motor/glassfish4/glassfish/bin/asadmin start-domain"
alias qa_status="sudo /opt/Motor/glassfish4/glassfish/bin/asadmin list-domains"
alias contencion1="$SSH@$NODE1 sudo /usr/local/bin/noc/trx.sh"
alias contencion2="$SSH@$NODE2 sudo /usr/local/bin/noc/trx.sh"
alias integrator1_stop="$SSH@$SW1 sudo /opt/wso2/wso2ei-6.3.0/bin/integrator.sh stop"
alias integrator1_start="$SSH@$SW1 sudo /opt/wso2/wso2ei-6.3.0/bin/integrator.sh start"
alias integrator2_stop="$SSH@$SW2 sudo /opt/wso2/wso2ei-6.3.0/bin/integrator.sh stop"
alias integrator2_start="$SSH@$SW2 sudo /opt/wso2/wso2ei-6.3.0/bin/integrator.sh start"
alias bod_stop="$SSH@$BOD_GW sudo /opt/bod/Gateway/tomcat8.5/bin/shutdown.sh"
alias bod_start="$SSH@$BOD_GW sudo /opt/bod/Gateway/tomcat8.5/bin/startup.sh"
alias bod_gf_status="$SSH@$BOD_MOTOR sudo /DATOS1/bod/Motor/glassfish4/bin/asadmin list-domains"
alias bod_gf_stop="$SSH@$BOD_MOTOR sudo /DATOS1/bod/Motor/glassfish4/bin/asadmin stop-domain"
alias bod_gf_start="$SSH@$BOD_MOTOR sudo nohup /DATOS1/bod/Motor/glassfish4/bin/asadmin start-domain >/dev/null 2>&1"
alias wifi_stop="$SSH@$WIFI sudo /opt/Gateway/tomcat8.5/bin/shutdown.sh >/dev/null 2>&1"
alias wifi_start="$SSH@$WIFI sudo /opt/Gateway/tomcat8.5/bin/startup.sh >/dev/null 2>&1"

echo "$$" > $PATH_SCRIPT/pid_test.txt

#. /usr/local/bin/telegram/test/token
. $PATH_SCRIPT/logger

new_message()
{

while true; do

        PENDING=`curl -k -s -X POST $URL_HOOK | jq '.result.pending_update_count'`

        if [ $PENDING -eq 0 ]; then

                true

        elif [ $PENDING -gt 0 ]; then


                PENDING_ID=`curl -Ls $URL_UPDATE | jq ".result[$(expr $PENDING - 1)].update_id"`

                if [ $PENDING_ID = "null" ]; then

                        true

                else

                        curl -s $URL_UPDATE?offset=$PENDING_ID > /dev/null
                        authentication

                fi

        fi

done

}

record()
{

        MSJ=`curl -s $URL_UPDATE | jq '.result[0].update_id'`
        ID_TO_DELETE=`expr $MSJ + 1`

        curl -s $URL_UPDATE?offset=$ID_TO_DELETE

        new_message

}


authentication()
{

        WRITER=`curl -s $URL_UPDATE | jq '.result[0].message.from.id'`

        if [ -z "$WRITER" ]; then

                new_message

        elif [ $WRITER = "null" ]; then

                new_message

        else

                cat $USER | grep $WRITER 2>/dev/null 2>&1

                if [[ $? -eq 0  ]]; then

                        commands
#                       token

                else

                        $SEND"No posee permisologia para ejecutar comandos"

                        record

                fi

        fi

        }

#token()

#{

#       local TIME=`cat $TIME_REQUEST | grep $WRITER | awk '{print $2}'`

#       if [[ -z "$TIME" ]]; then

#               $SEND"Debe solicitar token para utilizar este bot"

#       elif [[ $[`date "+%s"` - TIME] -ge 1800 ]]; then

#               $SEND"Debe solicitar token para utilizar este bot"

#       else

#               commands

#       fi

#       record

#}


commands()

{

        OPT=`curl -s $URL_UPDATE | jq '.result[0].message.text' | tr -d '/"' | awk -F "_" '{print $1}'`

        case $OPT in

                uptime)

                        local UPTIME=`ps -p $(cat $PATH_SCRIPT/pid_test.txt) -o etime=`
                        $SEND"$UPTIME"

                        logUptime $WRITER $OPT $UPTIME

                        record

                ;;

#               token)

#                       NUM_TOKEN=`curl -s $URL_UPDATE | jq '.result[0].message.text' | awk -F "_" '{print $2}' | tr -d '"'`

#                       if [[ $NUM_TOKEN -eq `cat $TOKEN_TXT` ]]; then

#                               $SEND"Permiso concedido"

#                       else

#                               $SEND"Permiso denegado"

#                       fi

#                       record

#               ;;

                guide)

                        $SEND"Lista de comandos:"
                        $SEND" - uptime:  Tiempo que el bot ha estado operativo. $NEW_LINE $NEW_LINE - cont1_(%cont): Aplica contencion en nodo 1. $NEW_LINE $NEW_LINE - no.cont1: Quita contencion en nodo 1. $NEW_LINE $NEW_LINE - cont2_(%cont): Aplica contencion en nodo 2. $NEW_LINE $NEW_LINE - no.cont2: Quita contencion en nodo 2. $NEW_LINE $NEW_LINE - cont.nodes_(%cont): Aplica contencion en ambos nodos. $NEW_LINE $NEW_LINE - no.cont.nodes: Quita contencion en ambos nodos. $NEW_LINE $NEW_LINE - cont.status: Muestra estatus actual de contencion en nodos. $NEW_LINE $NEW_LINE - node1.start: Inicia PM2 en nodo 1. $NEW_LINE $NEW_LINE - node1.stop: Detiene PM2 en nodo 1. $NEW_LINE $NEW_LINE - node2.start: Inicia PM2 en nodo 2. $NEW_LINE $NEW_LINE - node2.stop: Detiene PM2 en nodo 2. $NEW_LINE $NEW_LINE - nodes.start: Iniciar PM2 en ambos nodos. $NEW_LINE $NEW_LINE - nodes.stop: Detener PM2 en ambos nodos. $NEW_LINE $NEW_LINE - qa.start: Inicia motor de QA. $NEW_LINE $NEW_LINE- qa.stop: Detiene motor QA. $NEW_LINE $NEW_LINE - status: Muestra estadistica actual de la plataforma (tiempos prom, bd). $NEW_LINE $NEW_LINE - platform: Muestra estatus operacional de plataforma (estatus nodos y motor). $NEW_LINE $NEW_LINE - tx: Valida si nodos y motor estan transando. $NEW_LINE $NEW_LINE - dispo: Valida si los servers estan operativos y desde cuando $NEW_LINE $NEW_LINE - port: Realiza e indica estatus de conexion telnet hacia los puertos 5020 (CCR) y 4546 (HSM) $NEW_LINE $NEW_LINE - wifi: Arroja hora y fecha de la ultima tx registrada en log de POS wifi. $NEW_LINE $NEW_LINE - sw1.stop: Detiene el wso2 del Sw1. $NEW_LINE $NEW_LINE - sw1.start: Inicia el wso2 de sw1. $NEW_LINE $NEW_LINE - sw2.stop: Detiene el wso2 del Sw2. $NEW_LINE $NEW_LINE - sw2.start: Inicia el wso2 de sw2. $NEW_LINE $NEW_LINE - line1.stop: Detiene pm2 del nodo 1 y wso2 del sw 1. $NEW_LINE $NEW_LINE - line1.start: Inicia pm2 del nodo 1 y wso2 del sw 1. $NEW_LINE $NEW_LINE - line2.stop: Detiene pm2 del nodo 2 y wso2 del sw 2. $NEW_LINE $NEW_LINE - line2.start: Inicia pm2 del nodo 2 y wso2 del sw 2. $NEW_LINE $NEW_LINE - wso2.stop: Detiene wso2 de ambos Sw. $NEW_LINE $NEW_LINE - wso2.start: Inicia wso2 de ambos Sw. $NEW_LINE $NEW_LINE - consult_(dia): Consulta y muestra las transacciones registradasen el dia especificado, esto en ambos nodos del gw. $NEW_LINE $NEW_LINE - bod.status: Muestra estadisticas actuales de los POS BOD (tiempos promedios). $NEW_LINE $NEW_LINE - bod.tx: Valida si GW BOD esta trasando y si el motor esta activo. $NEW_LINE $NEW_LINE - bod.platform: Valida estatus operativo de los aplicativos. $NEW_LINE $NEW_LINE - bod.stop (no probado): Detiene tomcat del GW BOD. $NEW_LINE $NEW_LINE - bod.start (no probado): Inicia tomcat del GW BOD. $NEW_LINE $NEW_LINE - bod.gf.stop (no probado): Detiene motor de BOD. $NEW_LINE $NEW_LINE - bod.gf.start (no probado): Inicia motor de BOD"

                record


                ;;

                tx)

                        local LOG_NODE="/opt/wso2/wso2ei-6.3.0/repository/logs/wso2carbon.log"
                        local LOG_ENGINE="/DATOS/Logs/server.log"

                        local NODE1_COMPRA=`$SSH@$NODE1 grep compra $LOG_NODE | tac | awk 'NR==1{print $1, $2}' | tr -d "[]"`
                        local NODE2_COMPRA=`$SSH@$NODE2 grep compra $LOG_NODE | tac | awk 'NR==1{print $1, $2}' | tr -d "[]"`

                        local ENGINE_TX=`$SSH@$ENGINE grep -a "procesador" $LOG_ENGINE | tac | awk 'NR==1{print $1}'`

                        sleep 30

                        local NODE1_COMPRA2=`$SSH@$NODE1 grep compra $LOG_NODE | tac | awk 'NR==1{print $1, $2}' | tr -d "[]"`
                        local NODE2_COMPRA2=`$SSH@$NODE2 grep compra $LOG_NODE | tac | awk 'NR==1{print $1, $2}' | tr -d "[]"`

                        local ENGINE_TX2=`$SSH@$ENGINE grep -a "procesador" $LOG_ENGINE | tac | awk 'NR==1{print $1}'`

                        if [[ $NODE1_COMPRA < $NODE1_COMPRA2 ]]; then

                                local GW_1="Transando"
                                $SEND"Nodo 1: Transando"

                        elif [[ $NODE1_COMPRA > $NODE1_COMPRA2 ]]; then

                                sleep 20

                                local NODE1_COMPRA=$NODE1_COMPRA2
                                local NODE1_COMPRA2=`$SSH@$NODE1 grep compra $LOG_NODE | tac | awk 'NR==1{print $1, $2}' | tr -d "[]"`

                                if [[ $NODE1_COMPRA = $NODE1_COMPRA2 ]]; then

                                        $SEND"Nodo 1: No hay transacciones, se valida estatus PM2"

                                        $SEND"Nodo 1: $($SSH@$NODE1 "sudo pm2 show 0 | grep status" | awk '{print $4}')"

                                        local GW_1="Detenido"

                                else

                                        local GW_1="Transando"
                                        $SEND"Nodo 1: Transando"

                                fi

                        else

                                $SEND"Nodo 1: No hay transacciones, se valida estatus del PM2"

                                $SEND"Nodo 1: $($SSH@$NODE1 "sudo pm2 show 0 | grep status" | awk '{print $4}')"

                                local GW_1="Detenido"

                        fi

##########################################

                        if [[ $NODE2_COMPRA < $NODE2_COMPRA2 ]]; then

                                $SEND"Nodo 2: Transando"

                                local GW_2="Transando"

                        elif [[ $NODE2_COMPRA > $NODE2_COMPRA2 ]]; then

                                sleep 20

                                local NODE2_COMPRA=$NODE2_COMPRA2
                                local NODE2_COMPRA2=`$SSH@$NODE2 grep compra $LOG_NODE | tac | awk 'NR==1{print $1, $2}' | tr -d "[]"`

                                if [[ $NODE2_COMPRA = $NODE2_COMPRA2 ]]; then

                                        $SEND"Nodo 2: No hay transacciones, se valida estatus PM2"

                                        $SEND"Nodo 2: $($SSH@$NODE2 "sudo pm2 show 0 | grep status" | awk '{print $4}')"

                                        local GW_2="Detenido"

                                else

                                        $SEND"Nodo 2: Transando"

                                        local GW_2="Transando"

                                fi

                        else

                                $SEND"Nodo 2: No hay transacciones, se valida estatus del PM2"

                                $SEND"Nodo 2: $($SSH@$NODE2 "sudo pm2 show 0 | grep status" | awk '{print $4}')"

                                local GW_2="Detenido"

                        fi

#######################################

                        if [[ $ENGINE_TX < $ENGINE_TX2 ]]; then

                                $SEND"Motor: Activo"

                                local GF="Activo"


                        elif [[ $ENGINE_TX > $ENGINE_TX2 ]]; then

                                sleep 20

                                local ENGINE_TX=$ENGINE_TX2
                                local ENGINE_TX2=`$SSH@$ENGINE grep -a procesador $LOG_ENGINE | tac | awk 'NR==1{print $1}'`

                                if [[ $ENGINE_TX = $ENGINE_TX2 ]]; then

                                        $SEND"Motor: No hay transacciones, se valida estatus del Motor"

                                        if [[ $(engine_status | grep not | wc -l) -eq 0 ]]; then

                                                $SEND"Motor: Activo"

                                                local GF="Activo"

                                        else

                                                $SEND"Motor: Detenido"

                                                local GF="Detenido"

                                        fi

                                else

                                        $SEND"Motor: Detenido"

                                        local GF="Detenido"

                                fi

                        else

                                $SEND"Motor: No hay transacciones, se valida estatus del Motor"

                                if [[ $(engine_status | grep not | wc -l) -eq 0 ]]; then

                                                $SEND"Motor: Activo"

                                                local GF="Activo"

                                        else

                                                $SEND"Motor: Detenido"

                                                local GF="Detenido"

                                        fi

                        fi

                        logTx $WRITER $OPT $GW_1 $GW_2 $GF

                        record

                ;;


                cont1)

                        CONTENCION=`curl -s $URL_UPDATE | jq '.result[0].message.text' | awk -F "_" '{print $2}' | tr -d '"'`

                        if [[ $CONTENCION -le 100 ]] && [[ $CONTENCION -ge 0 ]]; then

                                contencion1 $CONTENCION

                                $SEND"Contencion del $CONTENCION% aplicada en nodo 1"

                        else

                                $SEND"Contencion debe ser entre 0 y 100"

                        fi

                        logCont1 $WRITER $OPT $CONTENCION

                        record

                ;;

                cont2)

                        CONTENCION=`curl -s $URL_UPDATE | jq '.result[0].message.text' | awk -F "_" '{print $2}' | tr -d '"'`

                        if [[ $CONTENCION -le 100 ]] && [[ $CONTENCION -ge 0 ]]; then

                                contencion2 $CONTENCION

                                $SEND"Contencion del $CONTENCION% aplicada en nodo 2"

                        else

                                $SEND"Contencion debe ser entre 0 y 100"

                        fi

                        logCont2 $WRITER $OPT $CONTENCION

                        record

                ;;

                cont.nodes)

                        CONTENCION=`curl -s $URL_UPDATE | jq '.result[0].message.text' | awk -F "_" '{print $2}' | tr -d '"'`

                        if [[ -z "$CONTENCION" ]]; then

                                $SEND"Valor vacio en contencion"

                                $CONTENCION=0

                        else

                                if [[ $CONTENCION -le 100 ]] && [[ $CONTENCION -ge 0 ]]; then

                                        contencion1 $CONTENCION
                                        contencion2 $CONTENCION

                                        $SEND"Contencion del $CONTENCION% aplicada en ambos nodos"

                                else

                                        $SEND"Contencion debe ser entre 0 y 100"

                                fi

                        fi

                        logContNodes $WRITER $OPT $CONTENCION

                        record

                ;;

                no.cont.nodes)

                        contencion1 0
                        contencion2 0

                        $SEND"Contencion retirada en ambos nodos"

                        logNoCont $WRITER $OPT

                        record

                ;;

                no.cont1)

                        contencion1 0

                        $SEND"Nodo 1: Contencion retirada"

                        logNoCont1 $WRITER $OPT

                        record

                ;;

                no.cont2)

                        contencion2 0

                        $SEND"Nodo 2: Contencion retirada"

                        logNoCont2 $WRITER $OPT

                        record

                ;;

                cont.status)


                        PORCENTAJE=`$SSH@$NODE1 sudo cat $XML | grep "RATE" | awk -F ">" '{print $2}' | awk -F "<" '{print $1}'`

                        PORCENTAJE2=`$SSH@$NODE2 sudo cat $XML | grep "RATE" | awk -F ">" '{print $2}' | awk -F "<" '{print $1}'`

                        $SEND"Contencion Nodo 1: $PORCENTAJE% $NEW_LINE Contencion Nodo 2: $PORCENTAJE2%"

                        logContStatus $WRITER $OPT $PORCENTAJE $PORCENTAJE2

                        record

                ;;

                node1.start)

                        node1_start > /dev/null

                        $SEND"Nodo 1: PM2 Iniciado"

                        local GW_1=`$SSH@$NODE1 "sudo pm2 show 0 | grep status" | awk '{print $4}'`

                        $SEND"Nodo 1: $GW_1"

                        logNode1Start $WRITER $OPT $GW_1

                        record

                ;;

                node1.stop)

                        node1_stop > /dev/null

                        $SEND"Nodo 1: PM2 Detenido"

                        local GW_1=`$SSH@$NODE1 "sudo pm2 show 0 | grep status" | awk '{print $4}'`

                        $SEND"Nodo 1: $GW_1"

                        logNode1Stop $WRITER $OPT $GW_1

                        record

                ;;

                node2.start)

                        node2_start > /dev/null

                        $SEND"Nodo 2: PM2 Iniciado"

                        local GW_2=`$SSH@$NODE2 "sudo pm2 show 0 | grep status" | awk '{print $4}'`

                        $SEND"Nodo 2: $GW_2"

                        logNode2Start $WRITER $OPT $GW_2

                        record

                ;;

                node2.stop)

                        node2_stop > /dev/null

                        $SEND"Nodo 2: PM2 Detenido"

                        local GW_2=`$SSH@$NODE2 "sudo pm2 show 0 | grep status" | awk '{print $4}'`

                        $SEND"Nodo 2: $GW_2"

                        logNode2Stop $WRITER $OPT $GW_2

                        record

                ;;

                nodes.start)

                        $SEND"Iniciando PM2 en ambos nodos"

                        node1_start > /dev/null

                        local GW_1=`$SSH@$NODE1 "sudo pm2 show 0 | grep status" | awk '{print $4}'`

                        $SEND"Nodo 1: $GW_1"

                        node2_start > /dev/null

                        local GW_2=`$SSH@$NODE2 "sudo pm2 show 0 | grep status" | awk '{print $4}'`

                        $SEND"Nodo 2: $GW_2"

                        sleep 5

                        $SEND"PM2 iniciado exitosamente"

                        logNodesStart $WRITER $OPT $GW_1 $GW_2

                        record

                ;;

                nodes.stop)

                        $SEND"Deteniendo PM2 en ambos nodos"

                        node1_stop >/dev/null

                        local GW_1=`$SSH@$NODE1 "sudo pm2 show 0 | grep status" | awk '{print $4}'`

                        $SEND"Nodo 1: $GW_1"

                        node2_stop > /dev/null

                        local GW_2=`$SSH@$NODE2 "sudo pm2 show 0 | grep status" | awk '{print $4}'`

                        $SEND"Nodo 2: $GW_2"

                        sleep 5

                        $SEND"PM2 detenido exitosamente"

                        logNodesStop $WRITER $OPT $GW_1 $GW_2

                        record

                ;;

                qa.stop)

                        $SEND"Bajando Motor"

                        qa_stop > /dev/null 2>&1

#                       sleep 160

                        if [[ $? -eq 0 ]]; then

                                if [[ $(qa_status | grep not | wc -l) -eq 0 ]]; then

                                        $SEND"Motor stopped"

                                        $SEND"Esperando a que liberen las conexiones a la BD"

                                        Y=1

                                        while [ $Y -gt 0 ]; do

#                                        BD_MOTOR=`$SSH@$ENGINE sudo netstat -natp | grep 1521 | grep ESTABLISHED | wc -l`

                                                if [[ $(netstat -natp | grep 1521 | grep ESTABLISHED | wc -l) -eq 0 ]]; then

                                                        break

                                                else

                                                        sleep 2

                                                        Y=1

                                                fi

                                        done

                                        $SEND"Conexiones a BD liberadas"

                                        local RESULT="Successful"

                                else

                                        $SEND"Error al detener el motor, intente nuevamente"

                                        local  RESULT="Failed"

                                fi

                        fi

                                logQaStop $WRITER $OPT $RESULT

                                record
                ;;

                qa.start)

                        $SEND"Levantando Motor"

                        qa_start > /dev/null 2>&1


                        if [[ $? -eq 0 ]]; then

                                if [[ $(qa_status | grep not | wc -l) -eq 0 ]]; then

                                        $SEND"Motor online"

                                        local RESULT="Successful"

                                else

                                        $SEND"Error al iniciar el motor"

                                        local RESULT="Failed"

                                fi

                        fi

                                logQaStart $WRITER $OPT $RESULT

                                record

                ;;

#               engine.start)

#                        $SEND"Levantando Motor"

#                        engine_start


 #                       if [[ $(engine_status | grep not | wc -l) -eq 0 ]]; then

#                                $SEND"Motor online"

#                               local RESULT="Successful"

 #                       else

  #                              $SEND"Error al iniciar el motor"

#                               local RESULT="Failed"

 #                       fi

#                       logEngineStart $WRITER $OPT $RESULT

 #                       record

  #                     ;;


#                engine.stop)

 #                       $SEND"Bajando Motor"

  #                      engine_stop > /dev/null 2>&1

   #                     sleep 40

#                        if [[ $(engine_status | grep not | wc -l) -eq 0 ]]; then

#                               $SEND"Motor stopped"

#                               $SEND"Esperando a que liberen las conexiones a la BD"

#                               CONEXIONES=1

#                               while [ $CONEXIONES -gt 0 ]; do

#                                               if [[ $($SSH@$ENGINE sudo netstat -natp | grep 1521 | grep ESTABLISHED | wc -l) -eq 0 ]]; then

 #                                              break

#                                       else

#                                               CONEXIONES=1

#                                               sleep 2

#                                       fi

#                               done

#                               $SEND"Conexiones a BD liberadas"

#                               local RESULT="Successful"

#                       else

#                               $SEND"Error al detener el motor, intente nuevamente"

#                               local RESULT="Failed"

#                       fi

#                               logEngineStop $WRITER $OPT $RESULT

 #                              record
#                ;;


                status)

                        CONEXIONES=`$SSH@$IP_BD sudo netstat -natp | grep 1521 | grep ESTABLISHED | wc -l`
                        CCR=`$SSH@$ENGINE cat $FILE_CCR | awk '{print $12}' | awk '{a+=$1}END{printf ("%.2f\n", a/NR)}' `
                        MOTOR=`$SSH@$ENGINE cat $FILE_MOTOR | awk '{print $12}' | awk '{a+=$1}END{printf ("%.2f\n", a/NR)}'`
                        NODO1=`$SSH@$NODE1 cat $FILE_NODE | awk '{a+=$5} END {printf ("%.2f\n", ((a/NR)*0.001))}'`
                        NODO2=`$SSH@$NODE2 cat $FILE_NODE | awk '{a+=$5} END {printf ("%.2f\n", ((a/NR)*0.001))}'`

                        $SEND" CCR: $CCR seg $NEW_LINE Motor: $MOTOR seg $NEW_LINE $NEW_LINE Nodo 1: $NODO1 seg $NEW_LINE Nodo 2: $NODO2 seg $NEW_LINE $NEW_LINE BD: $CONEXIONES "

                        logStatus $WRITER $OPT $CCR $MOTOR $NODO1 $NODO2 $CONEXIONES

                        record
                ;;

                platform)

                        $SEND"Nodo 1: $($SSH@$NODE1 "sudo pm2 show 0 | grep status" | awk '{print $4}')"
                        $SEND"Nodo 2: $($SSH@$NODE2 "sudo pm2 show 0 | grep status" | awk '{print $4}')"

                        local ARRAY=("$SW1" "$SW2")
                        local NAMES=("Sw1" "Sw2")

                        local COUNT=0

                        for i in ${ARRAY[@]}; do

                                local PROCESS=`$SSH@$i sudo ps -ef | grep integrator.sh | grep -v grep | wc -l`

                                if [[ $PROCESS -eq 1 ]]; then

                                        $SEND"${NAMES[$COUNT]}: online"

                                else

                                        $SEND"${NAMES[$COUNT]}: stopped"

                                fi

                                local COUNT=`expr $COUNT + 1`

                        done

                        if [[ $(engine_status | grep not | wc -l) -eq 0 ]]; then

                                local STATUS_MOTOR="online"
                                $SEND"Motor: online"

                        else

                                local STATUS_MOTOR="stopped"
                                $SEND"Motor: stopped"

                        fi

                        if [[ $(qa_status | grep not | wc -l) -eq 0 ]]; then

                                local STATUS_QA="online"
                                $SEND"Motor QA: online"

                        else

                                local STATUS_QA="stopped"
                                $SEND"Motor QA: stopped"

                        fi

                        logPlatform $WRITER $OPT $($SSH@$NODE1 "sudo pm2 show 0 | grep status" | awk '{print $4}') $($SSH@$NODE2 "sudo pm2 show 0 | grep status" | awk '{print $4}') $STATUS_MOTOR $STATUS_QA

                        record

                ;;

                dispo)

                        local ARRAY=("$NODE1" "$NODE2" "$SW1" "$SW2" "$ENGINE" "$IP_BD")
                        local ARRAY2=("Nodo 1" "Nodo 2" "Sw 1" "Sw 2" "Motor" "BD")
                        local COUNT=0

                        for i in ${ARRAY[@]}; do

                                local UPTIME=`$SSH@$i uptime | awk '{print $2, $3, $4, $5}' | tr -d ","`

                                if [[ -z "$UPTIME" ]]; then

                                        $SEND"${ARRAY2[$COUNT]}: Down"

                                        local UP="${ARRAY2[$COUNT]} - Down"

                                        logDispo $WRITER $OPT "$UP"

                                        local COUNT=`expr $COUNT + 1`

                                else

                                        $SEND"${ARRAY2[$COUNT]}: $UPTIME"

                                        local UP="${ARRAY2[$COUNT]} - $UPTIME"

                                        logDispo $WRITER $OPT "$UP"

                                        local COUNT=`expr $COUNT + 1`

                                fi

                        done

                        record

                ;;

                port)

                        local BALANCEADOR="172.28.111.165"

                        local PORTS=("5020 4546")

                        for i in ${PORTS[@]}; do

                                nc -w 5 $BALANCEADOR $i </dev/null

                                if [[ $? -eq 0 ]]; then

                                        local PORT="$i - Up"

                                        $SEND"Puerto $i: Up"

                                else

                                        local PORT="$i - Down"

                                        $SEND"Puerto $i: Down"

                                fi

                                logPort $WRITER $OPT "$PORT"

                        done

                        record

                ;;

                wifi)

                        local LOG_WIFI="/opt/Gateway/tomcat8.5/logs/catalina.out"

                        local TIME_TX=`$SSH@$WIFI sudo tac $LOG_WIFI | grep compra | awk 'NR==1{print $1, $2}'`

                        $SEND"$TIME_TX"

                        logWifi $WRITER $OPT "$TIME_TX"

                        record

                ;;

                wifi.stop)

                        $SEND"Deteniendo POS wifi Bicentenario"

                        wifi_stop

                        local PROCESS=`$SSH@$WIFI ps -ef | grep startup | grep -v grep | wc -l`

                        if [[ $PROCESS -eq 0 ]]; then

                                $SEND"POS wifi: stopped"

                        else

                                $SEND"POS wifi: online"

                        fi

                        record

                ;;

                wifi.start)

                        $SEND"Iniciando POS wifi Bicentenario"

                        wifi_start

                        local PROCESS=`$SSH@$WIFI ps -ef | grep startup | grep -v grep | wc -l`

                        if [[ $PROCESS -eq 1 ]]; then

                                $SEND"POS wifi: online"

                        else

                                $SEND"POS wifi: stopped"

                        fi

                        record

                ;;


                sw1.stop)

                        integrator1_stop

                        if [[ $? -eq 0 ]]; then

                                $SEND"Integrator Sw 1: stopped"

                                local SW="stopped"

                        else

                                $SEND"Integrator Sw 1: failed"
                                $SEND"Intente nuevamente"
                                local SW="failed"

                        fi

                        logSw $WRITER $OPT $SW

                        record

                ;;

                sw1.start)

                        integrator1_start

                        if [[ $? -eq 0 ]]; then

                                $SEND"Integrator Sw 1: started"

                                local SW="started"

                        else

                                $SEND"Integrator Sw 1: failed"
                                $SEND"Intente nuevamente"

                                local SW="failed"

                        fi

                        logSw $WRITER $OPT $SW

                        record

                ;;

                sw2.stop)

                        integrator2_stop

                        if [[ $? -eq 0 ]]; then

                                $SEND"Integrator Sw 2: stopped"

                                local SW="stopped"

                        else

                                $SEND"Integrator Sw 2: failed"
                                $SEND"Intente nuevamente"

                                local SW="failed"

                        fi

                        logSw $WRITER $OPT $SW

                        record

                ;;

                sw2.start)

                        integrator2_start

                        if [[ $? -eq 0 ]]; then

                                $SEND"Integrator switch 2: started"

                                local SW="started"

                        else

                                $SEND"Integrator switch 2: failed"
                                $SEND"Intente nuevamente"

                                local SW="failed"

                        fi

                        logSw $WRITER $OPT $SW

                        record

                ;;

                line1.stop)

#                       local NAMES=("Nodo 1" "Sw 1")
#                       local CMD=("node1_stop" "integrator1_stop")
#                       local CMD=("ssh -t -q agamez@172.28.111.42 sudo pm2 stop /opt/nodejs/api-gateway/bin/www –watch" "ssh -t -q agamez@172.28.111.44 sudo /opt/wso2/wso2ei-6.3.0/bin/integrator.sh stop")

#                       local COUNT=0

#                       for i in ${NAMES[@]}; do

#                               $SEND"Deteniendo ${NAMES[$COUNT]}"

#                               eval ${CMD[$COUNT]}

#                               if [[ $? -eq 0 ]]; then

#                                       $SEND"${NAMES[$COUNT]}: stopped"

#                               else

#                                       $SEND"${NAMES[$COUNT]}: failed"

#                               fi

#                       done

                        $SEND"Bajando linea 1"

                        node1_stop

                        integrator1_stop

                        sleep 5

                        $SEND"Nodo 1: $($SSH@$NODE1 "sudo pm2 show 0 | grep status" | awk '{print $4}')"

                        local PROCESS=`$SSH@$SW1 sudo ps -ef | grep integrator.sh | grep -v grep | wc -l`

                        if [[ $PROCESS -eq 0 ]]; then

                                $SEND"Sw 1: stopped"

                        else

                                $SEND"Sw 1: online"

                        fi

                        record

                ;;

                line1.start)

#                        local NAMES=("Nodo 1" "Sw 1")
#                        local CMD=("node1_start" "integrator1_start")
#                       local CMD=("ssh -t -q agamez@172.28.111.42 sudo pm2 start /opt/nodejs/api-gateway/bin/www –watch" "ssh -t -q agamez@172.28.111.44 sudo /opt/wso2/wso2ei-6.3.0/bin/integrator.sh start")

#                        local COUNT=0

#                        for i in ${NAMES[@]}; do

#                               $SEND"Iniciando ${NAMES[$COUNT]}"

#                                eval ${CMD[$COUNT]}

#                                if [[ $? -eq 0 ]]; then

#                                       $SEND"${NAMES[$COUNT]}: started"

#                                else

#                                        $SEND"${NAMES[$COUNT]}: failed"

#                                fi

 #                       done

                        $SEND"Levantando linea 1"

                        node1_start

                        integrator1_start

                        sleep 5

                        $SEND"Nodo 1: $($SSH@$NODE1 "sudo pm2 show 0 | grep status" | awk '{print $4}')"

                        local PROCESS=`$SSH@$SW1 sudo ps -ef | grep integrator.sh | grep -v grep | wc -l`

                        if [[ $PROCESS -ge 1 ]]; then

                                $SEND"Sw 1: online"

                        else

                                $SEND"Sw 1: stopped"

                        fi

                        record

                ;;

                line2.stop)

#                        local NAMES=("Nodo 2" "Sw 2")
#                        local CMD=("node2_stop" "integrator2_stop")

#                        local COUNT=0

#                        for i in ${NAMES[@]}; do

#                                $SEND"Deteniendo ${NAMES[$COUNT]}"

#                                eval ${CMD[$COUNT]}

#                                if [[ $? -eq 0 ]]; then

#                                        $SEND"${NAMES[$COUNT]}: stopped"

#                                else

#                                        $SEND"${NAMES[$COUNT]}: failed"

#                                fi

#                        done

                        $SEND"Bajando linea 2"

                        node2_stop

                        integrator2_stop

                        sleep 5

                        $SEND"Nodo 2: $($SSH@$NODE2 "sudo pm2 show 0 | grep status" | awk '{print $4}')"

                        local PROCESS=`$SSH@$SW2 sudo ps -ef | grep integrator.sh | grep -v grep | wc -l`

                        if [[ $PROCESS -eq 0 ]]; then

                                $SEND"Sw 2: stopped"

                        else

                                $SEND"Sw 2: online"

                        fi

                        record

                ;;

                line2.start)

#                        local NAMES=("Nodo 2" "Sw 2")
#                        local CMD=("nodo2_start" "integrator2_start")

#                        local COUNT=0

#                        for i in ${NAMES[@]}; do

#                                $SEND"Iniciando ${NAMES[$COUNT]}"

#                                eval ${CMD[$COUNT]}

#                                if [[ $? -eq 0 ]]; then

#                                        $SEND"${NAMES[$COUNT]}: started"

#                                else

#                                        $SEND"${NAMES[$COUNT]}: failed"

#                                fi

#                        done

                        $SEND"Levantando linea 2"

                        node2_start

                        integrator2_start

                        sleep 5

                        $SEND"Nodo 2: $($SSH@$NODE2 "sudo pm2 show 0 | grep status" | awk '{print $4}')"

                        local PROCESS=`$SSH@$SW2 sudo ps -ef | grep integrator.sh | grep -v grep | wc -l`

                        if [[ $PROCESS -eq 1 ]]; then

                                $SEND"Sw 2: online"

                        else

                                $SEND"Sw 2: stopped"

                        fi

                        record

                ;;

                wso2.stop)

#                       local NAMES=("Sw 1" "Sw 2")
#                        local CMD=("integrator1_stop" "integrator2_stop")

#                        local COUNT=0

#                        for i in ${NAMES[@]}; do

#                                $SEND"Deteniendo ${NAMES[$COUNT]}"

#                                eval ${CMD[$COUNT]}

#                                if [[ $? -eq 0 ]]; then

#                                        $SEND"${NAMES[$COUNT]}: stopped"

#                                else

#                                        $SEND"${NAMES[$COUNT]}: failed"

#                                fi

#                        done

                        $SEND"Deteniendo Wso2 en ambos nodos"

                        integrator1_stop

                        integrator2_stop

                        local PROCESS1=`$SSH@$SW1 sudo ps -ef | grep integrator | grep -v grep | wc -l`

                        local PROCESS2=`$SSH@$SW2 sudo ps -ef | grep integrator | grep -v grep | wc -l`

                        if [[ $PROCESS1 -eq 0 ]]; then

                                $SEND"Sw 1: stopped"

                        else

                                $SEND"Sw 1: online"

                        fi

                        if [[ $PROCESS2 -eq 0 ]]; then

                                $SEND"Sw 2: stopped"

                        else

                                $SEND"Sw 2: online"

                        fi

                        record

                ;;

                wso2.start)

#                        local NAMES=("Sw 1" "Sw 2")
#                        local CMD=("integrator1_start" "integrator2_start")

#                        local COUNT=0

#                        for i in ${NAMES[@]}; do

#                                $SEND"Iniciando ${NAMES[$COUNT]}"

#                                eval ${CMD[$COUNT]}

#                                if [[ $? -eq 0 ]]; then

#                                        $SEND"${NAMES[$COUNT]}: started"

#                                else

#                                        $SEND"${NAMES[$COUNT]}: failed"

#                                fi

#                        done

                        $SEND"Iniciando Wso2 en ambos nodos"

                        integrator1_start
                        integrator2_start

                        local PROCESS1=`$SSH@$SW1 sudo ps -ef | grep integrator -| grep -v grep | wc -l`
                        local PROCESS2=`$SSH@$SW2 sudo ps -ef | grep integrator -| grep -v grep | wc -l`

                        if [[ $PROCESS1 -eq 1 ]]; then

                                $SEND"Sw 1: online"

                        else

                                $SEND"Sw 1: stopped"

                        fi


                        if [[ $PROCESS2 -eq 1 ]]; then

                                $SEND"Sw 2: online"

                        else

                                $SEND"Sw 2: stopped"

                        fi

                        record

                ;;

                consult)

                        local FECHA=`curl -s $URL_UPDATE | jq '.result[0].message.text' | awk -F "_" '{print $2}' | tr -d '"'`

                        local SERVERS=("$NODE1" "$NODE2")

                        local NAMES=("Nodo1" "Nodo2")

                        local CONT=0;

                        for i in ${SERVERS[@]}; do

                                $SEND"${NAMES[$CONT]}:"

                                local VAR=`$SSH@$i sudo grep $FECHA /usr/local/bin/noc/respaldos/diatx.txt | awk '{print $1}'`

                                if [[ ! -z "$VAR" ]]; then

                                        local LINE=`$SSH@$i sudo grep $FECHA /usr/local/bin/noc/respaldos/diatx.txt | tr -d '\r'`

                                        $SEND"$LINE"

                                        CONT=`expr $CONT + 1`

                                else

                                        $SEND"Fecha invalida o no se encuentra en el registro"

                                fi

                        done;

                        record

                ;;

                bod.status)

                        local TIME=`$SSH@$BOD_GW sudo grep -a compra $LOG_BOD | tail -20 | awk '{print $14}' | awk '{$sum+=$0}END{printf ("%.2f", ($sum/NR))}'`

                        local TIME_GF=`$SSH@$BOD_MOTOR sudo grep -a procesador $LOG_BOD_GF | tail -20 | awk '{print $12}' | awk '{$sum+=$0}END{printf ("%.2f", ($sum/NR))}'`

                        local TIME_MOTOR=`$SSH@$BOD_MOTOR sudo grep -a motor $LOG_BOD_GF | tail -20 | awk '{print $12}' | awk '{$sum+=$0}END{printf ("%.2f", ($sum/NR))}'`

                        $SEND"Compra: $TIME seg $NEW_LINE BOD: $TIME_GF seg $NEW_LINE Motor: $TIME_MOTOR seg"

                        record

                ;;

                bod.tx)

                        local HOUR=`date "+%H"`

                        if [[ $HOUR -lt 9 ]] || [[ $HOUR -gt 19 ]]; then

                                $SEND"Espere 60 segundos"

                                local FECHA_TX1=`$SSH@$BOD_GW sudo grep -a compra $LOG_BOD | tac | awk 'NR==1{print $1,$2}'`

                                sleep 60

                                local FECHA_TX2=`$SSH@$BOD_GW sudo grep -a compra $LOG_BOD | tac | awk 'NR==1{print $1,$2}'`

                                if [[ $FECHA_TX2 > $FECHA_TX1 ]]; then

                                        $SEND"POS BOD transando"

                                else

                                        $SEND"No están transando"

                                fi

                        else

                                $SEND"Espere 20 segundos"

                                local FECHA_TX1=`$SSH@$BOD_GW sudo grep -a compra $LOG_BOD | tac | awk 'NR==1{print $1,$2}'`

                                sleep 20

                                local FECHA_TX2=`$SSH@$BOD_GW sudo grep -a compra $LOG_BOD | tac | awk 'NR==1{print $1,$2}'`

                                if [[ $FECHA_TX2 > $FECHA_TX1 ]]; then

                                        $SEND"POS BOD transando"

                                else

                                        $SEND"No están transando"

                                fi

                        fi

                        record

                ;;

                bod.platform)

                        local TOM=`$SSH@$BOD_GW sudo ps -ef | grep java | grep -v grep | wc -l`

                        local MOTOR_PROCESS=`$SSH@$BOD_MOTOR sudo ps -ef | grep glassfish | grep -v grep | wc -l`

                        local MOTOR_DOMAIN=`bod_gf_status | grep not | wc -l`

                        if [[ $TOM -eq 1 ]]; then

                                $SEND"Tomcat Online"

                        else

                                $SEND"Tomcat Offline"

                        fi

                        if [[ $MOTOR_PROCESS -eq 1 ]]; then

                                $SEND"Proceso GF Online"

                        else

                                $SEND"Proceso GF Offline"

                        fi

                        if [[ $MOTOR_DOMAIN -eq 1 ]]; then

                                $SEND"Dominio GF Offline"

                        else

                                $SEND"Dominio GF Online"

                        fi

                        record

                ;;

                bod.stop)

                        if [[ `$SSH@$BOD_GW sudo ps -ef | grep "java" | grep -v grep | wc -l` -eq 1 ]]; then

                                $SEND"Deteniendo POS BOD"

                                bod_stop

                                if [[ $? -eq 0 ]]; then

                                        $SEND"POS BOD detenidos"

                                else

                                        $SEND"Error al detener servicio"

                                fi

                        else

                                $SEND"El servicio no se encuentra arriba"

                        fi

                        record

                ;;

                bod.start)

                        local GW_PROCESS=`$SSH@$BOD_GW sudo ps -ef | grep "java" | grep -v grep | wc -l`

                        if [[ $GW_PROCESS -eq 1 ]]; then

                                $SEND"Servicio ya se encuentra arriba"

                        elif [[ $GW_PROCESS -lt 1 ]]; then

                                $SEND"Levantando servicio"

                                bod_start

                                if [[ $? -eq 0 ]]; then

                                        $SEND"Servicio arriba"

                                else

                                        $SEND"Error al levantar el servicio"

                                fi

                        fi

                        record

                ;;


                bod.gf.stop)

                        local MOTOR_PROCESS=`$SSH@$BOD_MOTOR sudo ps -ef | grep glassfish | grep -v grep | wc -l`

                        local MOTOR_STATUS=`bod_gf_status | grep not | wc -l`

                        if [[ $MOTOR_STATUS -eq 0 ]] && [[ $MOTOR_PROCESS -eq 1 ]]; then

                                $SEND"Deteniendo motor"

                                bod_gf_stop > /dev/null

                                sleep 10

                                if [[ $MOTOR_PROCESS -eq 1 ]] || [[ $MOTOR_STATUS -eq 0 ]]; then

                                        $SEND"No se detuvo correctamente el motor"
                                        $SEND"Intente nuevamente"

                                elif [[ $MOTOR_PROCESS -eq 0 ]] && [[ $MOTOR_STATUS -eq 1 ]]; then

                                        $SEND"Se detuvo completamente el motor"

                                else

                                        $SEND"No se detuvo correctamente el motor"

                                        $SEND"Intente nuevamente"

                                fi

                        elif [[ $MOTOR_STATUS -eq 1 ]] && [[ $MOTOR_PROCESS -eq 0 ]]; then


                                $SEND"Motor ya se encuentra detenido"

                        else

                                $SEND"Valide estatus del motor"

                        fi

                record


                ;;

                bod_gf_start)

                        local MOTOR_PROCESS=`$SSH@$BOD_MOTOR sudo ps -ef | grep glassfish | grep -v grep | wc -l`

                        local MOTOR_STATUS=`bod_gf_status | grep not | wc -l`

                        if [[ $MOTOR_PROCESS -eq 0 ]] && [[ $MOTOR_STATUS -eq 1 ]]; then

                                $SEND"Levantando motor"

                                bod_gf_start > /dev/null

                                sleep 10

                                        if [[ $MOTOR_PROCESS -eq 1 ]] && [[ $MOTOR_STATUS -eq 0 ]]; then

                                                $SEND"Motor iniciado exitosamente"

                                        else

                                                $SEND"No inicio correctamente el motor"
                                                $SEND"Intente nuevamente"

                                        fi


                        elif [[ $MOTOR_PROCESS -eq 1 ]] && [[ $MOTOR_STATUS -eq 0 ]]; then


                                $SEND"Motor ya se encuentra arriba"

                        else

                                $SEND"Valide estatus del motor"

                        fi

                ;;

                *)

#                       curl -k -s -X POST $URL_SEND"Comando errado"
                        $SEND"Comando errado"

                        logWrong $WRITER $OPT

                        record

                ;;

        esac

}

new_message;
record;
authentication;
token;
commands;


